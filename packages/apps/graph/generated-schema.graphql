type Account {
  accountName: String!
  id: String!
  transactions(after: String, before: String, first: Int, last: Int): AccountTransactionsConnection!
  transfers(after: String, before: String, first: Int, last: Int): AccountTransfersConnection!
}

input AccountFilter {
  module: String
}

type AccountTransactionsConnection {
  edges: [AccountTransactionsConnectionEdge]!
  pageInfo: PageInfo!
}

type AccountTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

type AccountTransfersConnection {
  edges: [AccountTransfersConnectionEdge]!
  pageInfo: PageInfo!
}

type AccountTransfersConnectionEdge {
  cursor: String!
  node: Transfer!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Block implements Node {
  chainid: BigInt!
  confirmationDepth: Int!
  creationtime: DateTime!
  epoch: DateTime!
  hash: ID!
  height: BigInt!
  id: ID!
  parent: Block
  parentHash: String
  parent_old: String!
  powhash: String!
  transactions(after: String, before: String, events: [String!] = [], first: Int, last: Int): BlockTransactionsConnection!
}

type BlockTransactionsConnection {
  edges: [BlockTransactionsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockTransactionsConnectionEdge {
  cursor: String!
  node: Transaction!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard DeweyDecimal format as specified by the OCLC https://www.oclc.org/content/dam/oclc/dewey/resources/summaries/deweysummaries.pdf
"""
scalar Decimal

type Event implements Node {
  block: Block!
  chainId: BigInt!
  eventParameters: [String!]!
  height: BigInt!
  id: ID!
  index: BigInt!
  module: String!
  name: String!
  qualName: String!
  requestKey: String!
  transaction: Transaction
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Floats that will have a value greater than 0."""
scalar PositiveFloat

type Query {
  account(accountName: String!, filter: AccountFilter): Account!
  blocksFromHeight(chainIds: [Int!], startHeight: Int!): [Block!]!
  completedBlockHeights(chainIds: [String!], completedHeights: Boolean, heightCount: Int): [Block!]!
  hello(name: String): String!
  lastBlockHeight: BigInt
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type Subscription {
  event(eventName: String!): [Event!]
  newBlocks(chainIds: [Int!]): [Block!]
  transaction(requestKey: String!): Transaction
}

type Transaction implements Node {
  badResult: String
  block: Block
  chainId: BigInt!
  code: String
  continuation: String
  creationTime: DateTime!
  data: String
  events: [Event!]
  gas: BigInt!
  gasLimit: BigInt!
  gasPrice: Float!
  goodResult: String
  height: BigInt!
  id: ID!
  logs: String
  metadata: String
  nonce: String
  numEvents: BigInt
  pactId: String
  proof: String
  requestKey: String!
  rollback: Boolean
  sender: String
  step: BigInt
  ttl: BigInt!
  txId: BigInt
}

type Transfer implements Node {
  amount: Decimal!
  blockHash: String!
  blocks: [Block!]!
  chainId: BigInt!
  fromAccount: String!
  height: BigInt!
  id: ID!
  idx: BigInt!
  moduleHash: String!
  moduleName: String!
  requestKey: String!
  toAccount: String!
}