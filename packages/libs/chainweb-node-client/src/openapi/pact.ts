/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  '/local': {
    /**
     * local
     * @description Blocking/sync call to submit a command for non-transactional execution. In a
     * blockchain environment this would be a node-local “dirty read”, which can
     * either serve as a node-local repl execution, or fully gassed transaction
     * simulation and transaction validation. Any database writes or changes to the
     * environment are rolled back.
     */
    post: {
      /**
       * local
       * @description Blocking/sync call to submit a command for non-transactional execution. In a
       * blockchain environment this would be a node-local “dirty read”, which can
       * either serve as a node-local repl execution, or fully gassed transaction
       * simulation and transaction validation. Any database writes or changes to the
       * environment are rolled back.
       */
      parameters?: {
        /**
         * @description Trigger fully-gassed mainnet transaction execution simulation and
         * transaction metadata validations.
         */
        /**
         * @description Require user signature validation when validating transaction
         * metadata.
         */
        query?: {
          preflight?: Record<string, never>;
          signatureValidation?: Record<string, never>;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['command'];
        };
      };
      responses: {
        /** @description The command's result. */
        200: {
          content: {
            'application/json': components['schemas']['command-result'];
          };
        };
        /** @description The command was invalid. */
        400: {
          content: {
            'text/plain': components['schemas']['validation-failure'];
          };
        };
      };
    };
  };
  '/send': {
    /**
     * send
     * @description Asynchronous submission of one or more public (unencrypted) commands
     * to the blockchain for execution.
     */
    post: {
      /**
       * send
       * @description Asynchronous submission of one or more public (unencrypted) commands
       * to the blockchain for execution.
       */
      requestBody?: {
        content: {
          'application/json': {
            cmds: components['schemas']['command'][];
          };
        };
      };
      responses: {
        /** @description The commands were successfully submitted. The response contains their request keys. */
        200: {
          content: {
            'application/json': {
              /** @description Request keys for use with `poll` or `listen` to retrieve results. */
              requestKeys: components['schemas']['request-key'][];
            };
          };
        };
        /** @description The command failed. */
        400: {
          content: {
            'text/plain': components['schemas']['validation-failure'];
          };
        };
      };
    };
  };
  '/poll': {
    /**
     * poll
     * @description Allows polling for one or more command results by request key.
     */
    post: {
      /**
       * poll
       * @description Allows polling for one or more command results by request key.
       */
      requestBody?: {
        content: {
          'application/json': {
            requestKeys: components['schemas']['request-key'][];
          };
        };
      };
      responses: {
        /** @description The command results for some of the requested request keys. */
        200: {
          content: {
            'application/json': {
              [key: string]:
                | components['schemas']['command-result']
                | undefined;
            };
          };
        };
      };
    };
  };
  '/listen': {
    /**
     * listen
     * @description Blocking request for single command result.
     */
    post: {
      /**
       * listen
       * @description Blocking request for single command result.
       */
      requestBody?: {
        content: {
          'application/json': {
            listen: components['schemas']['request-key'];
          };
        };
      };
      responses: {
        /** @description The request key was found. */
        200: {
          content: {
            'application/json': components['schemas']['command-result'];
          };
        };
      };
    };
  };
  '/private': {
    /**
     * private
     * @description Asynchronous submission of a single addressed command which
     * will be transmitted with end-to-end encryption only between addressed entity nodes.
     * Private payload metadata required.
     */
    post: {
      /**
       * private
       * @description Asynchronous submission of a single addressed command which
       * will be transmitted with end-to-end encryption only between addressed entity nodes.
       * Private payload metadata required.
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['command'];
        };
      };
      responses: {
        /** @description The command was accepted. */
        200: {
          content: {
            'application/json': {
              /** @description Request keys for use with `poll` or `listen` to retrieve results. */
              requestKeys?: components['schemas']['request-key'][];
            };
          };
        };
      };
    };
  };
  '/spv': {
    /**
     * spv
     * @description Blocking request to fetch spv proof of a cross chain transaction. Request must be sent to the chain where the transaction is initiated.
     */
    post: {
      /**
       * spv
       * @description Blocking request to fetch spv proof of a cross chain transaction. Request must be sent to the chain where the transaction is initiated.
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['spv-object'];
        };
      };
      responses: {
        /** @description The requested spv proof. */
        200: {
          content: {
            'application/json': components['schemas']['spv-proof'];
          };
        };
        /** @description The requested spv proof was not findable. */
        400: {
          content: {
            'text/plain': string;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Pact Command
     * @description Represents a single blockchain Pact transaction.
     * @example {
     *   "hash": "H6XjdPHzMai2HLa3_yVkXfkFYMgA0bGfsB0kOsHAMuI",
     *   "sigs": [
     *     {
     *       "sig": "8d452109cc0439234c093b5e204a7428bc0a54f22704402492e027aaa9375a34c910d8a468a12746d0d29e9353f4a3fbebe920d63bcc7963853995db015d060f"
     *     }
     *   ],
     *   "cmd": "{\"payload\":{\"exec\":{\"data\":null,\"code\":\"(+ 1 2)\"}},\"signers\":[{\"pubKey\":\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"}],\"meta\":{\"gasLimit\":1000,\"chainId\":\"0\",\"gasPrice\":1.0e-2,\"sender\":\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"},\"nonce\":\"nonce-value\"}"
     * }
     */
    command: {
      /** @description Stringified JSON `payload` object. Canonic non-malleable signed transaction data. */
      cmd: string;
      /**
       * @description Unpadded Base64URL of Blake2s-256 hash of the `cmd` field value. Serves as a command
       * `requestKey` since each transaction must be unique.
       *
       * @example H6XjdPHzMai2HLa3_yVkXfkFYMgA0bGfsB0kOsHAMuI
       */
      hash: string;
      /** @description List of signatures corresponding one-to-one with `signers` array in the payload. */
      sigs: {
        /**
         * @description Base16-encoded cryptograhic signature of `cmd` field data
         * for corresponding signer in payload.
         *
         * @example 8d452109cc0439234c093b5e204a7428bc0a54f22704402492e027aaa9375a34c910d8a468a12746d0d29e9353f4a3fbebe920d63bcc7963853995db015d060f
         */
        sig?: string;
      }[];
    };
    /**
     * @description Pact Command Payloads are encoded as strings in Pact commands, and contain all
     * non-malleable data for a transaction.
     *
     * @example {
     *   "payload": {
     *     "exec": {
     *       "data": null,
     *       "code": "(coin.transfer \"Alice\" \"Bob\" 10.0)"
     *     }
     *   },
     *   "signers": [
     *     {
     *       "pubKey": "368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca",
     *       "clist": [
     *         {
     *           "name": "coin.TRANSFER",
     *           "args": [
     *             "Alice",
     *             "Bob",
     *             10
     *           ]
     *         }
     *       ]
     *     }
     *   ],
     *   "meta": {
     *     "gasLimit": 1000,
     *     "chainId": "0",
     *     "gasPrice": 0.01,
     *     "sender": "368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"
     *   },
     *   "nonce": "nonce-value"
     * }
     */
    payload: {
      payload: OneOf<
        [
          {
            /** @description Executable pact code. */
            code?: string;
            /** @description Arbitrary JSON to be accessed via `read-msg`, `read-integer` et al in Pact code. */
            data?: Record<string, never>;
          },
          {
            /** @description ID of pact running previous step. */
            pactId?: string;
            /** @description Step in defpact to execute. */
            step?: number;
            /** @description Whether to execute a specified rollback on this step. */
            rollback?: boolean;
            /** @description Arbitrary JSON to be accessed via `read-msg`, `read-integer` et al in Pact code. */
            data?: Record<string, never>;
            /** @description Backend-specific data for continuing a cross-chain proof. */
            proof?: string;
          },
        ]
      >;
      meta: OneOf<
        [
          {
            /** @description Platform-specific chain identifier. For chainweb this is the stringified chain number. */
            chainId: string;
            /** @description Indicates gas-paying account. */
            sender: string;
            /** @description Limits total amount of gas to be consumed. */
            gasLimit: number;
            /** @description Specifies price per gas unit to be charged. */
            gasPrice: number;
            /** @description Time in seconds after creation time that transaction can be executed. */
            ttl: number;
            /** @description POSIX epoch sending time for transaction. */
            creationTime: number;
          },
          {
            /** @description Private message envelope address. Required only for private messages, otherwise null. */
            address?: {
              /** @description Sender entity name */
              from: string;
              /** @description Recipient entity names */
              to: string[];
            };
          },
        ]
      >;
      /** @description List of signers, corresponding with list of signatures in outer command. */
      signers: {
        /** @description Public key image. Pact default is base16 ED25519 encoding. */
        pubKey: string;
        /** @description Address, if any. Pact default expects this to match pubKey. */
        address?: string;
        /**
         * @description Signer scheme. Default is ED25519.
         * @enum {string}
         */
        scheme?: 'ED25519' | 'ETH';
        /** @description List of capabilities associated with/installed by this signer. */
        clist?: {
          /** @description Fully-qualified capability name. */
          name?: string;
          args?: components['schemas']['pact-value'][];
        };
      }[];
      /**
       * @description Backend-specific identifier of target network.
       * @enum {string}
       */
      networkId: 'mainnet01' | 'testnet04';
      /** @description Arbitrary user-supplied value. */
      nonce: string;
    };
    /** @description Object consisting of data required to fetch proof of a cross chain transaction */
    'spv-object': {
      /**
       * @description Request Key of an initiated cross chain transaction at the source chain.
       * @example 7af34f24d55d2fcf5de6fccfeeb837698ebff4598303237c64348a47806c8646
       */
      requestKey: string;
      /**
       * @description Target chain id of the cross chain transaction.
       * @example 1
       */
      targetChainId: string;
    };
    /**
     * Command Result
     * @description The result of attempting to execute a single well-formed Pact command.
     * @example {
     *   "gas": 123,
     *   "result": {
     *     "status": "success",
     *     "data": 3
     *   },
     *   "reqKey": "cQ-guhschk0wTvMBtrqc92M7iYm4S2MYhipQ2vNKxoI",
     *   "logs": "wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8",
     *   "metaData": null,
     *   "continuation": null,
     *   "txId": "456",
     *   "events": [
     *     {
     *       "name": "TRANSFER",
     *       "params": [
     *         "Alice",
     *         "Bob",
     *         10
     *       ],
     *       "module": "coin",
     *       "moduleHash": "ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo"
     *     }
     *   ]
     * }
     */
    'command-result': {
      reqKey: components['schemas']['request-key'];
      result: OneOf<
        [
          {
            /** @enum {string} */
            status?: 'success';
            data?: components['schemas']['pact-value'];
          },
          {
            /** @enum {string} */
            status?: 'failure';
            error?: components['schemas']['pact-error'];
          },
        ]
      >;
      /** @description Database-internal transaction tracking ID. */
      txId?: number;
      /** @description Backend-specific value providing image of database logs. */
      logs: string;
      metaData: {
        /** @description POSIX time of block */
        blockTime?: number;
        /** @description Parent Block hash of containing block. */
        prevBlockHash?: string;
        /** @description Block hash of containing block. */
        blockHash?: string;
        /** @description Block height of containing block. */
        blockHeight?: number;
        /** @description Public metadata. */
        publicMeta?: {
          /** @description POSIX time the command was created */
          creationTime?: number;
          /** @description Transaction time to live */
          ttl?: number;
          /** @description The transaction's gas limit */
          gasLimit?: number;
          /** @description Chain identifier */
          chainId?: string;
          /** @description The price of each unit of gas in KDA */
          gasPrice?: number;
          sender?: string;
        };
      };
      events?: components['schemas']['event'][];
      /** @description Describes result of a defpact execution. */
      continuation?: {
        /** @description Identifies this defpact execution. On first step generally matches request key. */
        pactId?: string;
        /** @description Identifies which step executed in defpact. */
        step?: number;
        /** @description Total number of steps in pact. */
        stepCount?: number;
        /** @description optional value for private pacts, indicates if step was skipped. */
        executed?: boolean;
        /** @description indicates if pact step has rollback. */
        stepHasRollback?: boolean;
        /** @description Closure describing executed pact. */
        continuation?: {
          /** @description Fully-qualified defpact name. */
          def?: string;
          args?: components['schemas']['pact-value'][];
        };
        /** @description Value yielded during pact step, optionally indicating cross-chain execution. */
        yield?: {
          /** @description Pact value object containing yielded data. */
          data?: {
            [key: string]: components['schemas']['pact-value'] | undefined;
          };
          /** @description Source chain ID. */
          source?: string;
          provenance?: {
            /** @description Chain ID of target chain for next step. */
            targetChainId?: string;
            /** @description Hash of module executing defpact. */
            moduleHash?: string;
          };
        };
      };
      gas: number;
    };
    /** @description Pact value compound type. */
    'pact-value':
      | string
      | OneOf<
          [
            number,
            {
              /**
               * @description String representation of number to avoid rounding error
               * @example 1.23498218000001
               */
              decimal: string;
            },
          ]
        >
      | {
          int: number | string;
        }
      | boolean
      | {
          [key: string]: components['schemas']['pact-value'] | undefined;
        }
      | {
          /**
           * @description Literal time value using the UTC time format.
           * @example 1970-01-01T00:00:00Z
           */
          time: string;
        }
      | components['schemas']['pact-value'][]
      | {
          /** @description Fully-qualified module or interface name. */
          refName?: string;
        }
      | OneOf<
          [
            {
              /** @description Set of public key/address values. Native pact public keys are ED25519 in base16 encoding. */
              keys: string[];
              /**
               * @description A pact function name. Built-in values are `keys-all` (match all keys in set),
               * `keys-any` (match at least one), and `keys-2` (match at least 2).
               * Custom functions have a fully-qualified name and
               * must accept two integer arguments `count` (number of keys in set) and `matched`
               * (number of set keys found in transaction set).
               */
              pred: string;
            },
            {
              /** @description Installed keyset name. */
              keysetref: string;
            },
            {
              /** @description Fully-qualified guard function name. */
              fun: string;
              /** @description Argument values to the guard function. */
              args: components['schemas']['pact-value'][];
            },
            {
              moduleName: {
                /** @description module bare name */
                name: string;
                /** @description module namespace */
                namespace: string;
              };
              /** @description Distinguishing/informative name for module guard. */
              name: string;
            },
            {
              /** @description Defpact execution ID. */
              pactId: string;
              /** @description Distinguishing/informative name for pact guard. */
              name: string;
            },
          ]
        >;
    /** @description Pact output event. */
    event: {
      /** @description Event defcap name. */
      name?: string;
      /** @description Qualified module name of event defcap. */
      module?: {
        /** @description module bare name */
        name: string;
        /** @description module namespace */
        namespace?: string;
      };
      params?: components['schemas']['pact-value'][];
      /** @description Hash of emitting module. */
      moduleHash?: string;
    };
    /** @description Verbose object describing failed execution. */
    'pact-error': {
      /** @description Descriptive error text. */
      message: string;
      callStack?: string[];
      info?: string;
      type?: string;
    };
    /**
     * Request Key
     * @description Unique ID of a pact transaction consisting of its hash.
     * @example y3aWL72-3wAy7vL9wcegGXnstH0lHi-q-cfxkhD5JCw
     */
    'request-key': string;
    /**
     * Validation Failure
     * @description Failure message of unexecuted command due to an invalid gas payer, meta, or other environments.
     */
    'validation-failure': string;
    /**
     * SPV Proof
     * @description Backend-specific data for continuing a cross-chain proof.
     * @example "eyJzdWJqZWN0Ijp7ImlucHV0IjoiQUJSN0ltZGhjeUk2TlRRMExDSnlaWE4xYkhRaU9uc2ljM1JoZEhWeklqb2ljM1ZqWTJWemN5SXNJbVJoZEdFaU9pSlhjbWwwWlNCemRXTmpaV1ZrWldRaWZTd2ljbVZ4UzJWNUlqb2lZa0Y0TjNOd1dqZFdUbUpZWTNocVZFUkNTamt5U21SdlUyVlFjWGx0U25KNWNXOUNhMWcyUkVoYWJ5SXNJbXh2WjNNaU9pSnBRVTF4Y0ZwaVUxSkRaR2hQUzA1YVVYZzFTMHBOTFZOUlNGRlZXRzF4UlZoUlRIRkNUVVpSVFVkSklpd2laWFpsYm5SeklqcGJleUp3WVhKaGJYTWlPbHNpZEdWemRDMXpaVzVrWlhJaUxDSXpaRGxsT1dZeFptSTBZemt6TnpneU5qWmpZV1JrTmpObE4yRTBOMkkzWVRZME5UTmlaVGsyTVdSaU1ETTNNMlkxWXpWbVlUUXdZV05sWlRaaVpHVm1JaXd4WFN3aWJtRnRaU0k2SWxSU1FVNVRSa1ZTSWl3aWJXOWtkV3hsSWpwN0ltNWhiV1Z6Y0dGalpTSTZiblZzYkN3aWJtRnRaU0k2SW1OdmFXNGlmU3dpYlc5a2RXeGxTR0Z6YUNJNkluVjBYMHBmV2s1cmIzbGhVRlZGU21ocGQxWmxWMjVyVTFGdU9VcFVPWE5SUTFkTFpHcHFWbFp5VjI4aWZWMHNJbTFsZEdGRVlYUmhJanB1ZFd4c0xDSmpiMjUwYVc1MVlYUnBiMjRpT201MWJHd3NJblI0U1dRaU9qRXhOams1TkRaOSJ9LCJhbGdvcml0aG0iOiJTSEE1MTJ0XzI1NiIsIm9iamVjdCI6IkFBQUFFQUFBQUFBQUFBQUJBUGhpTkRUdEFHT0l4dWE4OTFYUGU0NVFRS2QtTFdOekNpc0JDeHlmeDliQ0FPUkRnUUR2RFRrWmdOTzZ2M1ZpbU1wZ2ZGd2kyQm1mZ29jRVdwVmxRRW9EQWVoT1JPeFdBckJidXpldnZLTUdQZTB1RlVfUE8yejM3VC0tY0thdDZ1d3pBVm9DbFVrU1lXaXRDODF0TERVd2JYYVFWRTdnZFp1ckN6d0RiZUlBdlpBcUFKVThWZHZkMS1nYmo2UEtIVXdWQm00UWRvNl9YUkpYdHdKTGE4a0N3OWJhQWQtbXRubnlsUkczOC1WcTZzZmlZWm0xd2tKejhZcU5ZT2gwbVZCTktFR1VBTkdQWlB4NGFhMWFDdTJ1Ty1VRkJXLWxLbFdFeFU0a2JjMkszOFZCT21ZeEFDakxpdjMwazdBaGdwVXBCWUIxcEYwWFRqTmU4d3k4aHQta2FveFFKbTZpQVlXSkFYZlpXZERNdkQ3Z1UydUItWFdTVUh3bVpvM3NzV0stRzh1OTIxempBTzllbVBkOFJRVk5jOWZWZWJHN0lMb2lqVDlYMm9Db1p2Q00xQ29yR3laUUFTLVVZd3c4dkJ1bEVVYXlxaHZEQUFreUthbHk1TXk1bzJYVXZpZlZsNkg5QUM5ZXZsczVxMXh2bGhQbE9UWnJZNVB2SDNFbDd3dTBZTTJQYmZzaE1lUGFBUFpZRFJoWncyXzBVM1hIZllQbmJ6QlQ4bkc3a2gtR09kRTBTcFFCNEVOQ0FVWGEzcGVoMnhVd2dCVHd5WFVvc3RDRjNqQ21Scm9ZRGlEUTVGTGhYNkVQQUdlMUF2cFhJazZFM2tpdnUxY1N4aVFYV0hUcW1pdEUwLTVYaVpjNU4zQ3ZBS1dMNmM1RDdQSV84aW0zbG04cWhtZl84UXp3d2ZFcVpXQXZoQ0dWc1VVdCIsImNoYWluIjoxfQ"
     */
    'spv-proof': string;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
