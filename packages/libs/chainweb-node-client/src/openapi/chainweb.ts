/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/cut': {
    /** Query the current cut */
    get: {
      /** Query the current cut */
      parameters?: {
        /** @description Maximum cut height of the returned cut */
        query?: {
          maxheight?: number;
        };
      };
      responses: {
        /** @description The current cut */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['cut'];
          };
        };
      };
    };
    /**
     * Publish a cut
     * @description Publish a cut to a Chainweb node.
     *
     * The cut must contain an origin property that is not `null`. The receiving node
     * will first try to obtain all missing dependencies from the node that is
     * indicated in by the origin property before searching for the dependencies in the
     * P2P network.
     */
    put: {
      /**
       * Publish a cut
       * @description Publish a cut to a Chainweb node.
       *
       * The cut must contain an origin property that is not `null`. The receiving node
       * will first try to obtain all missing dependencies from the node that is
       * indicated in by the origin property before searching for the dependencies in the
       * P2P network.
       */
      /** @description A cut with an origin property that is not `null`. */
      requestBody: {
        content: {
          /**
           * @example {
           *   "value": {
           *     "origin": null,
           *     "height": 30798466,
           *     "weight": "b0wYplmNiTBXCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
           *     "hashes": {
           *       "0": {
           *         "height": 1539923,
           *         "hash": "qEaSmWt_tDcJC9AGbgWY9x12LW5VED7hGgfyz9x_S3w"
           *       },
           *       "1": {
           *         "height": 1539923,
           *         "hash": "TJuC6nfhamfD517gspAZmqD9umR71nAgttDOi1JbBHw"
           *       },
           *       "2": {
           *         "height": 1539924,
           *         "hash": "4ineCWfnO1rneWuBMLPzqTl2HF_sZpypT_3TEzf3VLc"
           *       },
           *       "3": {
           *         "height": 1539924,
           *         "hash": "ZEOMXB2ByqzL2HfYVKIZKAnoe4wIeJ2SaltnXDir59k"
           *       },
           *       "4": {
           *         "height": 1539923,
           *         "hash": "0g0rOoSznVW2BJDBmK0Lbxz22F-sxTZUNIrUs_Q8Ye4"
           *       },
           *       "5": {
           *         "height": 1539923,
           *         "hash": "5y_TL-clnF_wELMBKyJk0Sz8RVShw_bGQETJdrMkADA"
           *       },
           *       "6": {
           *         "height": 1539923,
           *         "hash": "YkQKv6P4_C4jRM3RqKK9FWPxIneeLzlkKQS9ATAQYRk"
           *       },
           *       "7": {
           *         "height": 1539923,
           *         "hash": "j_hJ9iiH_ATyeQeeRN3auGXjbBWiFgnTU0dYPIz8cKM"
           *       },
           *       "8": {
           *         "height": 1539924,
           *         "hash": "s7c3B55VbDsS6EJ-nc9S5k2kNbPOBGI8xxF3vUg4d4Q"
           *       },
           *       "9": {
           *         "height": 1539922,
           *         "hash": "bowQf63xSY9owHKhK1yGee2Q0Fn8yL_oCLaEUn-CGoA"
           *       },
           *       "10": {
           *         "height": 1539924,
           *         "hash": "uP-pHW4QKrV9fN1mlDGwKuaiIDlJW7xYSj1nW53EHM4"
           *       },
           *       "11": {
           *         "height": 1539924,
           *         "hash": "TIhegjZ0GEC73T4m0BVuFtfLNGuS56IUWEuf93AJ5UU"
           *       },
           *       "12": {
           *         "height": 1539923,
           *         "hash": "-j1qcAS9Fs-WQmc3WEhzZ96VojxnlIA2TFpfyIv31Zs"
           *       },
           *       "13": {
           *         "height": 1539923,
           *         "hash": "S-4TqMgWGlK1k33XRlU9w0Lfwr0RvkO5Jn78Au1OglM"
           *       },
           *       "14": {
           *         "height": 1539923,
           *         "hash": "xSuULf--S4TrgYNz82deaGhnPLWrg3pXkynGeUPUGwA"
           *       },
           *       "15": {
           *         "height": 1539923,
           *         "hash": "jsc9rugvcHXDiBAuoO9_j8R_b_jchtJJ8b5596i8wVg"
           *       },
           *       "16": {
           *         "height": 1539923,
           *         "hash": "qs1aEY8kSxfUBb_JRVswv5dYINRXBjGJteC-6RC1hjc"
           *       },
           *       "17": {
           *         "height": 1539924,
           *         "hash": "xzVBXaQxzlUfUrakDgppUubQBRXGh-Uy0HBdMNwCq_Y"
           *       },
           *       "18": {
           *         "height": 1539924,
           *         "hash": "4VOHPAqwioySYRycdl5MxfscQHwtlwwCAt7AySYQT98"
           *       },
           *       "19": {
           *         "height": 1539923,
           *         "hash": "1PrRg20XyQ_2cfgGOgNK9K-cqIJ1vO8-A-RJlfN5m00"
           *       }
           *     },
           *     "id": "BBz7KeurYTeQ0hMGbwUbQC84cRbVcacoDQTye-3qkXI",
           *     "instance": "mainnet01"
           *   }
           * }
           */
          'application/json': components['schemas']['cut'] &
            Record<string, never>;
        };
      };
      responses: {
        /** @description The cut was added to the cut processing pipeline of the remote node */
        204: never;
        /** @description The requester is not a peer of this node, and thus not allowed to send it cuts */
        401: never;
      };
    };
  };
  '/cut/peer': {
    /** Get Cut-Network Peer Info */
    get: {
      /** Get Cut-Network Peer Info */
      responses: {
        /** @description Peers from the peer database of the remote node */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Array of peers */
              items?: Record<string, never>;
            } & components['schemas']['page'];
          };
        };
      };
    };
    /** Put Cut-Network Peer Info */
    put: {
      /** Put Cut-Network Peer Info */
      /**
       * @description The peer that is added to the peer database of the cut P2P network of
       * the remote host.
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['peer'] & {
            id?: Record<string, unknown> | null;
          };
        };
      };
      responses: {
        /** @description The peer got added to the peer database of the remote node. */
        204: never;
        /**
         * @description The request is invalid. It is either malformed or the provided peer
         * is not reachable.
         *
         * Before the remote node adds a peer to its peer database it checks
         * whether the peer can be reached via the provided address. If this
         * check fails an error is returned.
         */
        400: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/plain': unknown;
          };
        };
      };
    };
  };
  '/chain/{chain}/hash': {
    /** Get Block Hashes */
    get: {
      /** Get Block Hashes */
      responses: {
        /**
         * @description A page of a collection of block hashes in **ascending** order
         * that satisfies query parameters. Any block hash from the chain
         * database is returned. **This includes hashes of orphaned blocks.**
         */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Array of block hashes */
              items?: Record<string, never>;
            } & components['schemas']['page'];
          };
        };
        /** @description A parameter indicated a nonexistent block height. */
        404: {
          content: {
            'application/json': {
              reason?: string;
              key?: components['schemas']['blockHash'];
            };
          };
        };
      };
    };
  };
  '/chain/{chain}/hash/branch': {
    /**
     * Get Block Hash Branches
     * @description A page of block hashes from branches of the block chain in
     * **descending** order.
     *
     * Only blocks are returned that are ancestors of the some block in the
     * set of upper bounds and are not ancestors of any block in the set of
     * lower bounds.
     */
    post: {
      /**
       * Get Block Hash Branches
       * @description A page of block hashes from branches of the block chain in
       * **descending** order.
       *
       * Only blocks are returned that are ancestors of the some block in the
       * set of upper bounds and are not ancestors of any block in the set of
       * lower bounds.
       */
      /** @description Upper and lower bounds of the queried branches */
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description No block hashes are returned that are predecessors of any
             * block with a hash from this array.
             */
            lower?: components['schemas']['blockHash'][];
            /**
             * @description Returned block hashes are predecessors of a block with an
             * hash from this array. This includes blocks with hashes from
             * this array.
             */
            upper?: components['schemas']['blockHash'][];
          };
        };
      };
      responses: {
        /** @description The requested block hashes */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Array of block hashes */
              items?: Record<string, never>;
            } & components['schemas']['page'];
          };
        };
        /** @description The requested block hashes could not be found */
        404: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              reason?: string;
              key?: components['schemas']['blockHash'];
            };
          };
        };
      };
    };
  };
  '/chain/{chain}/header': {
    /**
     * Get Block Headers
     * @description A page of a collection of block headers in **ascending** order
     * that satisfies query parameters. Any block header from the chain
     * database is returned. **This includes headers of orphaned blocks.**
     */
    get: {
      /**
       * Get Block Headers
       * @description A page of a collection of block headers in **ascending** order
       * that satisfies query parameters. Any block header from the chain
       * database is returned. **This includes headers of orphaned blocks.**
       */
      responses: {
        /** @description The requested block headers */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Array of base64 encoded block headers */
              items?: components['schemas']['base64Header'][];
            } & components['schemas']['page'];
            'application/json;blockheader-encoding=object': {
              /** @description Array of JSON encoded block headers */
              items?: Record<string, never>;
            } & components['schemas']['page'];
          };
        };
        /** @description The `next` or `maxheight` parameter indicated a nonexistent block height. */
        404: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              reason?: string;
              key?: components['schemas']['blockHash'];
            };
          };
        };
      };
    };
  };
  '/chain/{chain}/header/{blockHash}': {
    /**
     * Get Block Header by Hash
     * @description Query a block header by its hash
     */
    get: {
      /**
       * Get Block Header by Hash
       * @description Query a block header by its hash
       */
      responses: {
        /** @description The block header with that hash was found */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['base64Header'];
            'application/json;blockheader-encoding=object': components['schemas']['blockHeader'];
            'application/octet-stream': components['schemas']['binaryHeader'];
          };
        };
        /** @description A block header with that block hash was not found. */
        404: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              reason?: string;
              key?: components['schemas']['blockHash'];
            };
          };
        };
        /** @description The value of the `Accept` header is not supported. */
        406: never;
      };
    };
  };
  '/chain/{chain}/header/branch': {
    /**
     * Get Block Header Branches
     * @description A page of block headers from branches of the block chain in
     * **descending** order.
     *
     * Only blocks are returned that are ancestors of the some block in the
     * set of upper bounds and are not ancestors of any block in the set of
     * lower bounds.
     */
    post: {
      /**
       * Get Block Header Branches
       * @description A page of block headers from branches of the block chain in
       * **descending** order.
       *
       * Only blocks are returned that are ancestors of the some block in the
       * set of upper bounds and are not ancestors of any block in the set of
       * lower bounds.
       */
      /** @description Upper and lower bounds of the queried branches */
      requestBody?: {
        content: {
          'application/json': {
            /**
             * @description No blocks are returned that are predecessors of any block with
             * an hash from this array.
             */
            lower?: components['schemas']['blockHash'][];
            /**
             * @description Returned block headers are predecessors of a block with an
             * hash from this array. This includes blocks with hashes from
             * this array.
             */
            upper?: components['schemas']['blockHash'][];
          };
        };
      };
      responses: {
        /** @description The block headers were found */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Array of base64 encoded block headers */
              items?: Record<string, never>;
            } & components['schemas']['page'];
            'application/json;blockheader-encoding=object': {
              /** @description Array of JSON encoded block headers */
              items?: Record<string, never>;
            } & components['schemas']['page'];
          };
        };
        /** @description A block header indicated by a required parameter was not found. */
        404: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              reason?: string;
              key?: components['schemas']['blockHash'];
            };
          };
        };
        /** @description The value of the `Accept` header is not supported. */
        406: never;
      };
    };
  };
  '/chain/{chain}/payload/{payloadHash}': {
    /** Get Block Payload */
    get: {
      /** Get Block Payload */
      responses: {
        /** @description The payload data of for the given block payload hash */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['payload'];
          };
        };
        /** @description The block payload with that hash was not found */
        404: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Failure message */
              reason?: string;
              key?: components['schemas']['payloadHash'];
            };
          };
        };
      };
    };
  };
  '/chain/{chain}/payload/batch': {
    /** Get Batch of Block Payload */
    post: {
      /** Get Batch of Block Payload */
      requestBody: components['requestBodies']['payloadHashArray'];
      responses: {
        /**
         * @description Array of the some or all of the requested block payloads. The
         * payloads may be returned in any order.
         */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['payload'][];
          };
        };
      };
    };
  };
  '/chain/{chain}/payload/{payloadHash}/outputs': {
    /** Get Block Payload With Outputs */
    get: {
      /** Get Block Payload With Outputs */
      responses: {
        /** @description The payload with outputs for the given block payload hash */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['payloadWithOutputs'];
          };
        };
        /** @description A block payload with that hash was not found */
        404: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Failure message */
              reason?: string;
              key?: components['schemas']['payloadHash'];
            };
          };
        };
      };
    };
  };
  '/chain/{chain}/payload/outputs/batch': {
    /** Get Batch of Block Payload With Outputs */
    post: {
      /** Get Batch of Block Payload With Outputs */
      requestBody: components['requestBodies']['payloadHashArray'];
      responses: {
        /**
         * @description Array of the some or all of the requested block payloads with
         * outputs. Result items maybe returned in any order.
         */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['payloadWithOutputs'][];
          };
        };
      };
    };
  };
  '/chain/{chain}/mempool/getPending': {
    /** Get Pending Transactions from the Mempool */
    post: {
      /** Get Pending Transactions from the Mempool */
      parameters?: {
        /** @description Server nonce value */
        /** @description Mempool tx id value */
        query?: {
          nonce?: number;
          since?: number;
        };
      };
      responses: {
        /** @description recent state of pending transactions in the mempool */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              hashes?: string[];
              /** @description two-element array: `[nonce (integer), since (int64)]` */
              highwaterMark?: number[];
            };
          };
        };
      };
    };
  };
  '/chain/{chain}/mempool/member': {
    /** Check for Pending Transactions in the Mempool */
    post: {
      /** Check for Pending Transactions in the Mempool */
      requestBody: components['requestBodies']['requestKeyArray'];
      responses: {
        /**
         * @description Array of boolean values that indicate whether the respective
         * transaction is in the mempool.
         *
         * The array has the same size as the request body.
         */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': boolean[];
          };
        };
      };
    };
  };
  '/chain/{chain}/mempool/lookup': {
    /** Lookup Pending Transactions in the Mempool */
    post: {
      /** Lookup Pending Transactions in the Mempool */
      requestBody: components['requestBodies']['requestKeyArray'];
      responses: {
        /** @description Array of lookup results for the respective transactions */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @enum {string} */
              tag?: 'Missing' | 'Pending';
              contents?: components['schemas']['signedTxText'];
            }[];
          };
        };
      };
    };
  };
  '/chain/{chain}/mempool/insert': {
    /** Insert Transactions into the Mempool */
    put: {
      /** Insert Transactions into the Mempool */
      /** @description Array of strings of JSON encoded signed transactions */
      requestBody?: {
        content: {
          'application/json': components['schemas']['signedTxText'][];
        };
      };
      responses: {
        /** @description Transactions were inserted */
        200: never;
      };
    };
  };
  '/chain/{chain}/mempool/peer': {
    /** Get Chain Mempool-Network Peer Info */
    get: {
      /** Get Chain Mempool-Network Peer Info */
      responses: {
        /** @description Peer information */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': {
              /** @description Array of peers */
              items?: Record<string, never>;
            } & components['schemas']['page'];
          };
        };
      };
    };
    /** Put Chain Mempool-Network Peer Info */
    put: {
      /** Put Chain Mempool-Network Peer Info */
      /**
       * @description The peer that is added to the peer database of the mempoo P2P network of
       * the chain `{chain}` of remote host.
       */
      requestBody?: {
        content: {
          'application/json': components['schemas']['peer'] & {
            id?: Record<string, unknown> | null;
          };
        };
      };
      responses: {
        /** @description The peer got added to the peer database of the remote node. */
        204: never;
        /**
         * @description Bad Request.
         * The request is invalid. It is either malformed or the provided peer is not reachable.
         *
         * Before the remote node addes a peer to its peer database it checks whether the peer can be reached
         * via the provided address. If this check fails an error is returned.
         */
        400: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/plain': unknown;
          };
        };
      };
    };
  };
  '/mining/work': {
    /**
     * Get Mining Work
     * @description A new BlockHeader to mine on
     */
    get: {
      /**
       * Get Mining Work
       * @description A new BlockHeader to mine on
       */
      /** @description Miner Info */
      requestBody?: {
        content: {
          /**
           * @example {
           *   "account": "miner",
           *   "predicate": "keys-all",
           *   "public-keys": [
           *     "f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27"
           *   ]
           * }
           */
          'application/json': components['schemas']['minerInfo'];
        };
      };
      responses: {
        /** @description A mining work item */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/octet-stream': {
              /**
               * 4 Chain ID Bytes
               * Format: binary
               * @description The chain selection made by the Node. This is
               * informational. Generally, miner should not care about the
               * chain.
               */
              chainBytes?: string;
              /**
               * 32 PoW Target Bytes
               * Format: binary
               * @description The PoW target for the current block. The PoW hash of a
               * valid block must not be larger than this value.
               *
               * For arithmetic comparisons the hash-target and the PoW
               * hash are interpreted as unsigned 256 bit integral number
               * in little endian encoding.
               */
              targetBytes?: string;
              /**
               * 286 Work Header Bytes
               * Format: binary
               * @description PoW Work Header Bytes. The last 8 bytes are the nonce. The
               * creation time is encoded in bytes 44-52. Miners must not
               * change or make any assumption about the other bytes.
               *
               * The creation time is encoded as little endian twoth
               * complement integral number that counts SI microseconds
               * since POSIX epoch (leap seconds are ignored). It always
               * positive (highest bit is 0). Miners are free but not
               * required to update the creation time. The value must be
               * strictly larger than the creation time of the parent block
               * and must not be in the future.
               */
              headerBytes?: string;
            };
          };
        };
      };
    };
  };
  '/chainweb/0.0/mainnet01/mining/solved': {
    /**
     * Solved Mining Work
     * @description Submit a solution for a new block
     */
    post: {
      /**
       * Solved Mining Work
       * @description Submit a solution for a new block
       */
      /** @description The solved PoW work header bytes */
      requestBody?: {
        content: {
          'application/octet-stream': string;
        };
      };
      responses: {
        /** @description Solved mining work is valid */
        204: never;
      };
    };
  };
  '/mining/updates': {
    /**
     * Notification of Updated Work
     * @description An server-sent event sources that notifies miners when new mining
     * work becomes available.
     *
     * The stream is terminated by the server in regular intervals and
     * it is up to the client to request a new stream.
     */
    get: {
      /**
       * Notification of Updated Work
       * @description An server-sent event sources that notifies miners when new mining
       * work becomes available.
       *
       * The stream is terminated by the server in regular intervals and
       * it is up to the client to request a new stream.
       */
      /** @description The first 4 bytes received from a call to `/mining/work`. This tells the Node to only inform the Miner of a new Cut when the specific chain in question has updated. */
      requestBody?: {
        content: {
          'application/octet-stream': string;
        };
      };
      responses: {
        /**
         * @description Each events consists of a single line: `event:New Cut`.
         * Events are separated by empty lines.
         */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/event-stream': components['schemas']['miningUpdateEventStream'];
          };
        };
      };
    };
  };
  '/config': {
    /**
     * Configuration of Chainweb Node
     * @description Returns the configuration of chainweb-node as a JSON structure.
     * Sensitive information is removed from the result. The JSON schema depends
     * on the chainweb node version and is not part of the stable chainweb-node
     * API.
     */
    get: {
      /**
       * Configuration of Chainweb Node
       * @description Returns the configuration of chainweb-node as a JSON structure.
       * Sensitive information is removed from the result. The JSON schema depends
       * on the chainweb node version and is not part of the stable chainweb-node
       * API.
       */
      responses: {
        /** @description Configuration of the chainweb node */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': unknown;
          };
        };
      };
    };
  };
  '/make-backup': {
    /**
     * Start a backup job
     * @description Backup jobs are identified by the Unix timestamp when they're begun.
     *
     * If a backup job is already in progress, this endpoint will return its
     * identifier instead of starting a new one.
     *
     * The RocksDB portion of the database is always backed up; if backupPact
     * is set, the Sqlite (Pact) portion is backed up as well, taking much
     * longer.
     *
     * There is no automatic backup retention policy - users need to delete old
     * backups.
     *
     * This API is enabled by configuring the node thus:
     * ```yaml
     * backup:
     *   api:
     *     enabled: true
     *   directory: {some file path to put backups in}
     * ```
     * The backup directory ideally will be located in the same partition as the
     * RocksDB portion of the node database.
     *
     * RocksDB backups to the same partition as holds the active RocksDB
     * database will have almost zero space overhead immediately, but over time
     * as the active database diverges from the backup the space overhead will
     * increase.  If the backup is to another partition, it will take longer
     * and take as much disk space as the active RocksDB database.
     *
     * Pact database backups always require about as much space as the active
     * Pact database does.
     */
    post: {
      /**
       * Start a backup job
       * @description Backup jobs are identified by the Unix timestamp when they're begun.
       *
       * If a backup job is already in progress, this endpoint will return its
       * identifier instead of starting a new one.
       *
       * The RocksDB portion of the database is always backed up; if backupPact
       * is set, the Sqlite (Pact) portion is backed up as well, taking much
       * longer.
       *
       * There is no automatic backup retention policy - users need to delete old
       * backups.
       *
       * This API is enabled by configuring the node thus:
       * ```yaml
       * backup:
       *   api:
       *     enabled: true
       *   directory: {some file path to put backups in}
       * ```
       * The backup directory ideally will be located in the same partition as the
       * RocksDB portion of the node database.
       *
       * RocksDB backups to the same partition as holds the active RocksDB
       * database will have almost zero space overhead immediately, but over time
       * as the active database diverges from the backup the space overhead will
       * increase.  If the backup is to another partition, it will take longer
       * and take as much disk space as the active RocksDB database.
       *
       * Pact database backups always require about as much space as the active
       * Pact database does.
       */
      responses: {
        /** @description A backup job has been created */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/plain': components['schemas']['backupId'];
          };
        };
      };
    };
  };
  '/check-backup/{backupId}': {
    /** Check the status of a backup job */
    get: {
      /** Check the status of a backup job */
      responses: {
        /** @description A backup job with that identifier exists, here is its status */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/plain': components['schemas']['backupStatus'];
          };
        };
        /** @description There is no backup job with that identifier */
        404: never;
      };
    };
  };
  '/health-check': {
    /**
     * Health Check
     * @description Checks whether the chainweb-node is up and running and responding to API
     * requests. In order to check the state of consensus the
     * [/cut/get](#tag/cut/paths/~1cut/get) endpoint should be used instead.
     */
    get: {
      /**
       * Health Check
       * @description Checks whether the chainweb-node is up and running and responding to API
       * requests. In order to check the state of consensus the
       * [/cut/get](#tag/cut/paths/~1cut/get) endpoint should be used instead.
       */
      responses: {
        /** @description The node is healthy */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/plain': string;
          };
        };
      };
    };
  };
  '/info': {
    /**
     * General Node Info
     * @description Provides general information about the node and the chainweb version
     */
    get: {
      /**
       * General Node Info
       * @description Provides general information about the node and the chainweb version
       */
      responses: {
        /** @description General information about the node and the chainweb version */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'application/json': components['schemas']['nodeInfo'];
          };
        };
      };
    };
  };
  '/header/updates': {
    /**
     * Blocks Event Stream
     * @description An source of server events that emits a `BlockHeader` event for each new
     * block header that is added to the chain database of the remote node.
     *
     * The stream contains blocks that may later become orphaned. It is
     * therefor recommended to buffer events on the client side for the most
     * recent block heights until the desired confirmation depth is reached.
     *
     * The server may terminate this stream from time to time and it is up to
     * the client to reinitiate the stream.
     */
    get: {
      /**
       * Blocks Event Stream
       * @description An source of server events that emits a `BlockHeader` event for each new
       * block header that is added to the chain database of the remote node.
       *
       * The stream contains blocks that may later become orphaned. It is
       * therefor recommended to buffer events on the client side for the most
       * recent block heights until the desired confirmation depth is reached.
       *
       * The server may terminate this stream from time to time and it is up to
       * the client to reinitiate the stream.
       */
      responses: {
        /**
         * @description A stream of `BlockHeader` events. **This is not a JSON array**.
         *
         * Events are separated by empty lines. Each event consists of an
         * `event` property and a `data` property which are separated by
         * newlines.
         */
        200: {
          headers: {
            'x-peer-addr': components['headers']['x-peer-addr'];
            'x-server-timestamp': components['headers']['x-server-timestamp'];
            'x-chainweb-node-version': components['headers']['x-chainweb-node-version'];
          };
          content: {
            'text/event-stream': {
              /** @enum {string} */
              event?: 'BlockHeader';
              data?: {
                /** @description Number of transactions in the block */
                txCount?: number;
                /** @description A custom representation of the POW hash for use in the block explorer UI */
                powHash?: string;
                header?: components['schemas']['blockHeader'];
                /** @description A custom representation of the POW target for use in the block explorer UI */
                target?: string;
              };
            }[];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * POSIX Timestamp
     * @description Seconds since POSIX epoch
     * @example 1619108524
     */
    posixTimestamp: number;
    /**
     * POSIX Timestamp in Microseconds
     * @description Microseconds since POSIX epoch
     * @example 1602382624629329
     */
    posixTimestampMicro: number;
    /**
     * Chainweb Version
     * @description The version of the Chainweb network
     * @enum {unknown}
     */
    chainwebVersion:
      | 'test-singleton'
      | 'development'
      | 'mainnet01'
      | 'testnet04';
    /**
     * Chain ID
     * @description A Chainweb chain ID. In Kadena Chainweb chains are named by numbers
     * starting form 0. Valid values depend on the current graph at the
     * respective block height of the chainweb version.
     *
     * @example 0
     */
    chainId: number;
    /**
     * Host Address
     * @description Host address containing IPv4 and port
     * @example 10.36.1.3:42988
     */
    hostAddress: string;
    /**
     * Signed Transaction Text
     * @description Text of a JSON encoded signed Pact transaction
     * @example {
     *   "value": {
     *     "hash": "y3aWL72-3wAy7vL9wcegGXnstH0lHi-q-cfxkhD5JCw",
     *     "sigs": [
     *       {
     *         "sig": "8ddc06b37c496f2cadc4f7412405a80faf3ab07482ff5553b9b5fcc73d1b4121275ad5948d9b4078e553b71f8b42eaf6b24135bf2fb4d5840c16bcdde0e35e0f"
     *       }
     *     ],
     *     "cmd": "{\"networkId\":\"mainnet01\",\"payload\":{\"exec\":{\"data\":{\"account-keyset\":{\"pred\":\"keys-all\",\"keys\":[\"acc28032a1bb725b7ba0a3593ab86f393894fa6659281f3dfdfee0afe48559a2\"]}},\"code\":\"(coin.transfer-create \\\"60241f51ea34e05c61fbea9d\\\" \\\"acc28032a1bb725b7ba0a3593ab86f393894fa6659281f3dfdfee0afe48559a2\\\" (read-keyset \\\"account-keyset\\\") 5007.0000)\"}},\"signers\":[{\"pubKey\":\"acc28032a1bb725b7ba0a3593ab86f393894fa6659281f3dfdfee0afe48559a2\",\"clist\":[{\"args\":[\"60241f51ea34e05c61fbea9d\",\"acc28032a1bb725b7ba0a3593ab86f393894fa6659281f3dfdfee0afe48559a2\",5007],\"name\":\"coin.TRANSFER\"},{\"args\":[],\"name\":\"coin.GAS\"}]}],\"meta\":{\"creationTime\":1618949714,\"ttl\":300,\"gasLimit\":600,\"chainId\":\"0\",\"gasPrice\":1.0e-7,\"sender\":\"acc28032a1bb725b7ba0a3593ab86f393894fa6659281f3dfdfee0afe48559a2\"},\"nonce\":\"\\\"2021-04-20T20:16:13.645Z\\\"\"}"
     *   }
     * }
     */
    signedTxText: string;
    /**
     * Request Key
     * @description Base64Url-encoded, request key of a Pact transaction
     * @example y3aWL72-3wAy7vL9wcegGXnstH0lHi-q-cfxkhD5JCw
     */
    requestKey: string;
    /**
     * SHA256 Hash
     * @description Base64Url (without padding) encoded SHA256 hash
     * @example y3aWL72-3wAy7vL9wcegGXnstH0lHi-q-cfxkhD5JCw
     */
    sha256Hash: string;
    /**
     * Block Hash
     * @description Base64Url (without padding) encoded block hash
     * @example QxGCAz5AY1Y41nh1yWtgqhKhZ9pPiPRagFdIKNqBH7
     */
    blockHash: components['schemas']['sha256Hash'];
    /**
     * Block Payload Hash
     * @description Base64Url (without padding) encoded block payload hash
     * @example GpaWbHkHrCjRhY8hKE0qZ1WsBBaG3Y_zkFLV2sYumQA
     */
    payloadHash: components['schemas']['sha256Hash'];
    /**
     * Block Height
     * @description The height of a block is the number of its predecessors in the block chain
     *
     * @example 1000000
     */
    blockHeight: number;
    /**
     * Block Weight
     * @description The POW weight of a block is the sum of the difficulties of the block
     * and of all of its ancestors. The difficulty of a block is the maximum
     * difficulty divided by the target.
     *
     * It represented as the base64Url (without padding) 256 bit little endian
     * encoding of the numerical value.
     *
     * @example iil_D0t2MGqjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
     */
    blockWeight: string;
    /**
     * PoW Target
     * @description The PoW target of a block represented as the base64Url (without
     * padding) 256 bit little endian encoding of the numerical value.
     *
     * @example 2uMCnB4lWsErj9w1C1vAp1sHYd-sABf3kgcAAAAAAAA
     */
    target: string;
    /**
     * PoW Nonce
     * @description PoW nonce of the block. This is computed by the miner such that the
     * block hash is smaller than the target.
     */
    nonce: string;
    /**
     * Base64Url Block Header
     * @description Base64Url (without padding) encoded binary block header
     * @example {
     *   "value": {
     *     "$ref": "components[\"examples\"][\"base64HeaderPage\"][\"value\"][\"items\"][\"0\"]"
     *   }
     * }
     */
    base64Header: string;
    /** Backup job status */
    backupStatus: string;
    /**
     * Backup job identifier
     * @description Textual backup job identifier
     * @example 1648665437000
     */
    backupId: string;
    /**
     * Binary Block Header
     * @description Binary representation of a block header
     */
    binaryHeader: string;
    /**
     * Block Header
     * @description JSON Encoded Block Header
     * @example {
     *   "value": {
     *     "$ref": "components[\"examples\"][\"blockHeaderPage\"][\"value\"][\"items\"][\"0\"]"
     *   }
     * }
     */
    blockHeader: {
      creationTime: components['schemas']['posixTimestampMicro'];
      parent: components['schemas']['blockHash'];
      height: components['schemas']['blockHeight'];
      hash: components['schemas']['blockHash'];
      chainId: components['schemas']['chainId'];
      weight: components['schemas']['blockWeight'];
      /** @description A reserved value that must be 0. */
      featureFlags: number;
      epochStart: components['schemas']['posixTimestampMicro'];
      /**
       * @description The block hashes of the adjacent parents of the block. This is
       * represented as an associative array that maps the adjancent chain
       * ids to the respective block hash.
       */
      adjacents: {
        [key: string]: components['schemas']['blockHash'] | undefined;
      };
      payloadHash: components['schemas']['payloadHash'];
      chainwebVersion: components['schemas']['chainwebVersion'];
      target: components['schemas']['target'];
      nonce: components['schemas']['nonce'];
    };
    /**
     * Block Payload
     * @description Payload of a Block including the Merkle roots for transactions and
     * transaction outputs.
     *
     * @example {
     *   "value": {
     *     "$ref": "components[\"examples\"][\"payloads\"][\"value\"][\"1\"]"
     *   }
     * }
     */
    payload: {
      /** @description Array of base64Url (without padding) encoded JSON texts of signed Pact transactions */
      transactions: string[];
      /** @description Base64Url (without padding) encoded JSON text of the miner data of the payload */
      minerData: string;
      transactionsHash: components['schemas']['sha256Hash'];
      outputsHash: components['schemas']['sha256Hash'];
      payloadHash: components['schemas']['payloadHash'];
    };
    /**
     * Block Payload With Outputs
     * @description Payload with outputs of a Block including the Merkle roots for
     * transactions and transaction outputs
     *
     * @example {
     *   "value": {
     *     "transactions": [],
     *     "minerData": "eyJhY2NvdW50IjoiYTFiMzE0MGNiN2NjODk1YzBlMDkxNzAyZWQwNTU3OWZiZTA1YzZlNjc0NWY4MmNlNjAzNzQ2YjQwMGM4MTU0OCIsInByZWRpY2F0ZSI6ImtleXMtYWxsIiwicHVibGljLWtleXMiOlsiYTFiMzE0MGNiN2NjODk1YzBlMDkxNzAyZWQwNTU3OWZiZTA1YzZlNjc0NWY4MmNlNjAzNzQ2YjQwMGM4MTU0OCJdfQ",
     *     "transactionsHash": "nT0j4xw2woMkdXXaopdurXIn24OG-jNMqQzUGfxV_MA",
     *     "outputsHash": "4pXRrZ2K0_V0iGAxQCKrKdLjQTBZHBOQS7P-47kdnhY",
     *     "payloadHash": "GpaWbHkHrCjRhY8hKE0qZ1WsBBaG3Y_zkFLV2sYumQA",
     *     "coinbase": "eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiJJa2hoV0VGQ2NURlFTMU5MYkdodVkwcHJNRjlOZERjMVgyeE1OMDVUTTNkSk5qSTNVV1pZV2w4NE5Xc2kiLCJsb2dzIjoiZ3Noak1kWFJrVGxKYmIxalZkQWJ6SVVDcGpQb1JBQ2pEbExzRzBXNkJEMCIsIm1ldGFEYXRhIjpudWxsLCJjb250aW51YXRpb24iOm51bGwsInR4SWQiOjEyNzIzNTB9"
     *   }
     * }
     */
    payloadWithOutputs: {
      /**
       * @description Array of pairs of transactions and their outputs.
       * Signed Pact transactions and outputs are base64Url-encoded without padding.
       */
      transactions: (string | string)[][];
      /** @description Base64Url (without padding) encoded JSON text of the miner data of the payload */
      minerData: string;
      transactionsHash: components['schemas']['sha256Hash'];
      outputsHash: components['schemas']['sha256Hash'];
      payloadHash: components['schemas']['payloadHash'];
      /** @description Base64Url (without padding) encoded JSON text of coinbase output of the block */
      coinbase: string;
    };
    /**
     * Peer
     * @description Peer info object
     * @example {
     *   "address": {
     *     "hostname": "85.238.99.91",
     *     "port": 30004
     *   },
     *   "id": "PRLmVUcc9AH3fyfMYiWeC4nV2i1iHwc0-aM7iAO8h18"
     * }
     */
    peer: {
      /**
       * @description The base64Url (without padding) encoded SHA256 fingerprint of the
       * SSL certificate of the node. This can be null only if the node uses
       * an official CA signed certificate
       */
      id: string | null;
      address: {
        /**
         * @description A domain name or IP address. This must be a domain name only if
         * the respective node is using a valid CA signed SSL certificate.
         */
        hostname:
          | Record<string, never>
          | Record<string, never>
          | Record<string, never>;
        /** @description Port number */
        port: number;
      };
    };
    /**
     * Cut
     * @description Cut datastruction of the chainweb API
     * @example {
     *   "value": {
     *     "origin": null,
     *     "height": 30798466,
     *     "weight": "b0wYplmNiTBXCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
     *     "hashes": {
     *       "0": {
     *         "height": 1539923,
     *         "hash": "qEaSmWt_tDcJC9AGbgWY9x12LW5VED7hGgfyz9x_S3w"
     *       },
     *       "1": {
     *         "height": 1539923,
     *         "hash": "TJuC6nfhamfD517gspAZmqD9umR71nAgttDOi1JbBHw"
     *       },
     *       "2": {
     *         "height": 1539924,
     *         "hash": "4ineCWfnO1rneWuBMLPzqTl2HF_sZpypT_3TEzf3VLc"
     *       },
     *       "3": {
     *         "height": 1539924,
     *         "hash": "ZEOMXB2ByqzL2HfYVKIZKAnoe4wIeJ2SaltnXDir59k"
     *       },
     *       "4": {
     *         "height": 1539923,
     *         "hash": "0g0rOoSznVW2BJDBmK0Lbxz22F-sxTZUNIrUs_Q8Ye4"
     *       },
     *       "5": {
     *         "height": 1539923,
     *         "hash": "5y_TL-clnF_wELMBKyJk0Sz8RVShw_bGQETJdrMkADA"
     *       },
     *       "6": {
     *         "height": 1539923,
     *         "hash": "YkQKv6P4_C4jRM3RqKK9FWPxIneeLzlkKQS9ATAQYRk"
     *       },
     *       "7": {
     *         "height": 1539923,
     *         "hash": "j_hJ9iiH_ATyeQeeRN3auGXjbBWiFgnTU0dYPIz8cKM"
     *       },
     *       "8": {
     *         "height": 1539924,
     *         "hash": "s7c3B55VbDsS6EJ-nc9S5k2kNbPOBGI8xxF3vUg4d4Q"
     *       },
     *       "9": {
     *         "height": 1539922,
     *         "hash": "bowQf63xSY9owHKhK1yGee2Q0Fn8yL_oCLaEUn-CGoA"
     *       },
     *       "10": {
     *         "height": 1539924,
     *         "hash": "uP-pHW4QKrV9fN1mlDGwKuaiIDlJW7xYSj1nW53EHM4"
     *       },
     *       "11": {
     *         "height": 1539924,
     *         "hash": "TIhegjZ0GEC73T4m0BVuFtfLNGuS56IUWEuf93AJ5UU"
     *       },
     *       "12": {
     *         "height": 1539923,
     *         "hash": "-j1qcAS9Fs-WQmc3WEhzZ96VojxnlIA2TFpfyIv31Zs"
     *       },
     *       "13": {
     *         "height": 1539923,
     *         "hash": "S-4TqMgWGlK1k33XRlU9w0Lfwr0RvkO5Jn78Au1OglM"
     *       },
     *       "14": {
     *         "height": 1539923,
     *         "hash": "xSuULf--S4TrgYNz82deaGhnPLWrg3pXkynGeUPUGwA"
     *       },
     *       "15": {
     *         "height": 1539923,
     *         "hash": "jsc9rugvcHXDiBAuoO9_j8R_b_jchtJJ8b5596i8wVg"
     *       },
     *       "16": {
     *         "height": 1539923,
     *         "hash": "qs1aEY8kSxfUBb_JRVswv5dYINRXBjGJteC-6RC1hjc"
     *       },
     *       "17": {
     *         "height": 1539924,
     *         "hash": "xzVBXaQxzlUfUrakDgppUubQBRXGh-Uy0HBdMNwCq_Y"
     *       },
     *       "18": {
     *         "height": 1539924,
     *         "hash": "4VOHPAqwioySYRycdl5MxfscQHwtlwwCAt7AySYQT98"
     *       },
     *       "19": {
     *         "height": 1539923,
     *         "hash": "1PrRg20XyQ_2cfgGOgNK9K-cqIJ1vO8-A-RJlfN5m00"
     *       }
     *     },
     *     "id": "BBz7KeurYTeQ0hMGbwUbQC84cRbVcacoDQTye-3qkXI",
     *     "instance": "mainnet01"
     *   }
     * }
     */
    cut: {
      origin?: components['schemas']['peer'];
      /**
       * @description The cut height is the sum of the height of all blocks of the cut.
       * Usage of this value should be avoided, because its semantics may
       * change in the future
       */
      height: number;
      /** @description The sum of the weights of all blocks in the cut */
      weight: string;
      /**
       * @description An object that maps chain Ids to their respective block hash and
       * block height
       */
      hashes: {
        [key: string]: components['schemas']['hashWithBlockHeight'] | undefined;
      };
      instance?: string;
      id?: string;
    };
    /**
     * Hash with block height
     * @description A block hash and the height of that block
     * @example {
     *   "height": 1539924,
     *   "hash": "uP-pHW4QKrV9fN1mlDGwKuaiIDlJW7xYSj1nW53EHM4"
     * }
     */
    hashWithBlockHeight: {
      hash: string;
      height: number;
    };
    /**
     * Chainweb Node Info
     * @description General information about a chainweb node
     * @example {
     *   "value": {
     *     "nodeNumberOfChains": 20,
     *     "nodeApiVersion": "0.0",
     *     "nodeChains": [
     *       "12",
     *       "13",
     *       "14",
     *       "15",
     *       "8",
     *       "9",
     *       "10",
     *       "11",
     *       "4",
     *       "5",
     *       "6",
     *       "7",
     *       "0",
     *       "16",
     *       "1",
     *       "17",
     *       "2",
     *       "18",
     *       "3",
     *       "19"
     *     ],
     *     "nodeVersion": "mainnet01",
     *     "nodeGraphHistory": [
     *       [
     *         0,
     *         [
     *           [
     *             0,
     *             [
     *               5,
     *               2,
     *               3
     *             ]
     *           ],
     *           [
     *             1,
     *             [
     *               4,
     *               6,
     *               3
     *             ]
     *           ],
     *           [
     *             2,
     *             [
     *               4,
     *               7,
     *               0
     *             ]
     *           ],
     *           [
     *             3,
     *             [
     *               8,
     *               0,
     *               1
     *             ]
     *           ],
     *           [
     *             4,
     *             [
     *               9,
     *               1,
     *               2
     *             ]
     *           ],
     *           [
     *             5,
     *             [
     *               9,
     *               6,
     *               0
     *             ]
     *           ],
     *           [
     *             6,
     *             [
     *               5,
     *               7,
     *               1
     *             ]
     *           ],
     *           [
     *             7,
     *             [
     *               8,
     *               6,
     *               2
     *             ]
     *           ],
     *           [
     *             8,
     *             [
     *               9,
     *               7,
     *               3
     *             ]
     *           ],
     *           [
     *             9,
     *             [
     *               8,
     *               4,
     *               5
     *             ]
     *           ]
     *         ]
     *       ],
     *       [
     *         852054,
     *         [
     *           [
     *             0,
     *             [
     *               15,
     *               10,
     *               5
     *             ]
     *           ],
     *           [
     *             1,
     *             [
     *               11,
     *               6,
     *               16
     *             ]
     *           ],
     *           [
     *             2,
     *             [
     *               12,
     *               7,
     *               17
     *             ]
     *           ],
     *           [
     *             3,
     *             [
     *               13,
     *               8,
     *               18
     *             ]
     *           ],
     *           [
     *             4,
     *             [
     *               14,
     *               9,
     *               19
     *             ]
     *           ],
     *           [
     *             5,
     *             [
     *               8,
     *               7,
     *               0
     *             ]
     *           ],
     *           [
     *             6,
     *             [
     *               8,
     *               9,
     *               1
     *             ]
     *           ],
     *           [
     *             7,
     *             [
     *               9,
     *               5,
     *               2
     *             ]
     *           ],
     *           [
     *             8,
     *             [
     *               5,
     *               6,
     *               3
     *             ]
     *           ],
     *           [
     *             9,
     *             [
     *               4,
     *               6,
     *               7
     *             ]
     *           ],
     *           [
     *             10,
     *             [
     *               11,
     *               0,
     *               19
     *             ]
     *           ],
     *           [
     *             11,
     *             [
     *               12,
     *               10,
     *               1
     *             ]
     *           ],
     *           [
     *             12,
     *             [
     *               13,
     *               11,
     *               2
     *             ]
     *           ],
     *           [
     *             13,
     *             [
     *               12,
     *               14,
     *               3
     *             ]
     *           ],
     *           [
     *             14,
     *             [
     *               13,
     *               15,
     *               4
     *             ]
     *           ],
     *           [
     *             15,
     *             [
     *               14,
     *               0,
     *               16
     *             ]
     *           ],
     *           [
     *             16,
     *             [
     *               15,
     *               1,
     *               17
     *             ]
     *           ],
     *           [
     *             17,
     *             [
     *               16,
     *               2,
     *               18
     *             ]
     *           ],
     *           [
     *             18,
     *             [
     *               17,
     *               3,
     *               19
     *             ]
     *           ],
     *           [
     *             19,
     *             [
     *               10,
     *               4,
     *               18
     *             ]
     *           ]
     *         ]
     *       ]
     *     ]
     *   }
     * }
     */
    nodeInfo: {
      /** @example 20 */
      nodeNumberOfChains: number;
      /** @example 0.0 */
      nodeApiVersion: string;
      /**
       * @example [
       *   "0"
       * ]
       */
      nodeChains: string[];
      /**
       * @example mainnet01
       * @enum {string}
       */
      nodeVersion: 'test-singleton' | 'development' | 'mainnet01' | 'testnet04';
      /**
       * @description Array of all chain graphs indexed by the height of the first block with the repective
       * graph. Graphs are encoded as adjacency lists.
       */
      nodeGraphHistory: (number | (number | number[])[][])[][];
    };
    /**
     * Page
     * @description Page of a collection of items
     * @example {
     *   "value": {
     *     "next": "inclusive:o1S4NNFhKWg8T1HEkmDvsTH9Ut9l3_qHRpp00yRKZIk",
     *     "items": [
     *       "AAAAAAAAAABRoiLHW7EFAB2lwAatTykipYZ3CZNPzLe-f5S-zUt8COtu0H12f_OZAwAFAAAAMpic85rur2MYf3zli8s8bHxTFjriFoMPTr6ZPs8sjxMKAAAAVBKuhU_hQmuvKlx88A5o-FH0rzNo59NsdxmOGNBQ-ycPAAAAMItdqgHZxf7j6l0oE8X-G9-VyMbnQmZrtSniuRe_EJ9CtyxsSb7daPIIYAaXMgSEsQ3dkxY5GjJjLwAAAAAAABqWlmx5B6wo0YWPIShNKmdVrAQWht2P85BS1drGLpkAAAAAADUJ-ARn7blgHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEIPAAAAAAAFAAAA-na5gFuxBQAFL-3CY4YuAJNGp9KhDkbrKkIPWYyq8WvtAaNPoUFWC16louSx8YN5",
     *       "AAAAAAAAAAA0slHKW7EFAJNGp9KhDkbrKkIPWYyq8WvtAaNPoUFWC16louSx8YN5AwAFAAAAALcxv1ZiwwQ_QX9eOBZMbzIop6n7XtveS1FqOFwyvGMKAAAAC76ElC60qXSJQCHePpzzJxsCYvvrqvmkoHPyZnex-4QPAAAAKv0sz_rTANjoiJwMrdZFCJNFwdH0U_M5ouwMr3BXBfpCtyxsSb7daPIIYAaXMgSEsQ3dkxY5GjJjLwAAAAAAALJlIg1vY3w_9L63bePn1yk_5agvdEbIBBjm3adxc5xWAAAAAGzpBzdiVL9gHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQUIPAAAAAAAFAAAA-na5gFuxBQALiBhXgqaHAb4VWug3oddEVy0X9y_jEkE2Kmi_vyGP5ovr-fDIz_Uf"
     *     ],
     *     "limit": 2
     *   }
     * }
     */
    page: {
      /**
       * @description The number of items in the page. This number can be smaller but
       * never be larger than the number of requested items.
       */
      limit: number;
      /**
       * @description A cursor that can be used to query the next page. It should be used
       * literally as value for the `next` parameter in a follow-up request.
       */
      next: null | string;
      /** @description The items in the page. */
      items: Record<string, never>;
    };
    /**
     * Mining Update Events
     * @description A stream of server-sent events. **This is not an JSON array**.
     * Events are separated by empty lines (`\n\n`). Each event
     * consists of a single line:
     *
     *   event:New Cut
     *
     * @example event:New Cut
     *
     * event:New Cut
     *
     * event:New Cut
     */
    miningUpdateEventStream: {
      /** @enum {string} */
      event?: 'New Cut';
    }[];
    /**
     * Miner Info
     * @example {
     *   "account": "miner",
     *   "predicate": "keys-all",
     *   "public-keys": [
     *     "f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27"
     *   ]
     * }
     */
    minerInfo: {
      /**
       * Account Name
       * @description Miner account name. Usually this is the same as the public key.
       * @example f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27
       */
      account?: string;
      /**
       * Key Predicate
       * @description key predicate. For a single key this is usually `keys-all`.
       * @example keys-all
       * @enum {unknown}
       */
      predicate?: 'keys-all' | 'keys-any';
      'public-keys'?: string[];
    };
    /**
     * Node Configuration
     * @description The configuration of a node. Private information regarding certificates
     * and local networks are removed. The schema is subject to change and not
     * part of the stable API.
     *
     * @example {
     *   "value": {
     *     "allowReadsInLocal": false,
     *     "rosetta": true,
     *     "throttling": {
     *       "local": 1,
     *       "mining": 2,
     *       "global": 200,
     *       "putPeer": 21
     *     },
     *     "serviceApi": {
     *       "interface": "invalid",
     *       "port": 0
     *     },
     *     "validateHashesOnReplay": false,
     *     "chainwebVersion": "mainnet01",
     *     "pactQueueSize": 2000,
     *     "mining": {
     *       "coordination": {
     *         "enabled": false,
     *         "updateStreamTimeout": 240,
     *         "limit": 1200,
     *         "updateStreamLimit": 2000,
     *         "miners": []
     *       },
     *       "nodeMining": {
     *         "miner": {
     *           "account": "",
     *           "predicate": "keys-all",
     *           "public-keys": []
     *         },
     *         "enabled": false
     *       }
     *     },
     *     "p2p": {
     *       "peer": {
     *         "certificateChainFile": null,
     *         "key": null,
     *         "interface": "*",
     *         "certificateChain": null,
     *         "hostaddress": {
     *           "hostname": "34.70.108.163",
     *           "port": 1789
     *         },
     *         "keyFile": null
     *       },
     *       "maxPeerCount": 100,
     *       "private": false,
     *       "ignoreBootstrapNodes": false,
     *       "maxSessionCount": 8,
     *       "bootstrapReachability": 0.5,
     *       "sessionTimeout": 300,
     *       "peers": [
     *         {
     *           "address": {
     *             "hostname": "us-e1.chainweb.com",
     *             "port": 443
     *           },
     *           "id": null
     *         },
     *         {
     *           "address": {
     *             "hostname": "us-w1.chainweb.com",
     *             "port": 443
     *           },
     *           "id": null
     *         }
     *       ]
     *     },
     *     "transactionIndex": {
     *       "enabled": true,
     *       "configuration": {}
     *     },
     *     "gasLimitOfBlock": 150000,
     *     "reorgLimit": 480,
     *     "headerStream": true,
     *     "mempoolP2p": {
     *       "enabled": true,
     *       "configuration": {
     *         "pollInterval": 30,
     *         "maxSessionCount": 6,
     *         "sessionTimeout": 240
     *       }
     *     },
     *     "reintroTxs": true,
     *     "cuts": {
     *       "pruneChainDatabase": "none",
     *       "fetchTimeout": 3000000,
     *       "initialCutHeightLimit": null
     *     }
     *   }
     * }
     */
    nodeConfig: Record<string, never>;
  };
  responses: {};
  parameters: {
    /**
     * @description Maximum number of records that may be returned. The actual number may be
     * lower.
     */
    limit: number;
    /**
     * @description The cursor for the next page. This value can be found as value of the
     * `next` property of the previous page.
     */
    next: string;
    /** @description the id of the chain to which the request is sent */
    chain: number;
    /** @description The identifier of the backup being checked */
    backupId: components['schemas']['backupId'];
    /** @description Flag, if present back up the Pact databases too. Extra disk space and time required */
    backupPact: string;
    /**
     * @description Minimum block height of the returned headers
     * @example 500000
     */
    minheight: number;
    /**
     * @description Maximum block height of the returned headers
     * @example 500000
     */
    maxheight: number;
    /**
     * @description Payload hash of a block
     * @example {
     *   "value": "GpaWbHkHrCjRhY8hKE0qZ1WsBBaG3Y_zkFLV2sYumQA"
     * }
     */
    payloadHash: components['schemas']['payloadHash'];
    /**
     * @description Block hash of a block
     * @example {
     *   "value": [
     *     "k0an0qEORusqQg9ZjKrxa-0Bo0-hQVYLXqWi5LHxg3k"
     *   ]
     * }
     */
    blockHash: components['schemas']['blockHash'];
  };
  requestBodies: {
    /** @description Array of request keys */
    requestKeyArray?: {
      content: {
        'application/json': components['schemas']['requestKey'][];
      };
    };
    /** @description An array of block payload hashes */
    payloadHashArray?: {
      content: {
        'application/json': components['schemas']['payloadHash'][];
      };
    };
  };
  headers: {
    /**
     * @description The time of the clock of the remote node
     * @example 1618597601
     */
    'x-server-timestamp': components['schemas']['posixTimestamp'];
    /**
     * @description The version of the remote chainweb node
     * @example 2.6
     */
    'x-chainweb-node-version': string;
    /**
     * @description Host and port of the client as observed by the remote node
     * @example 10.36.1.3:42988
     */
    'x-peer-addr': components['schemas']['hostAddress'];
  };
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
