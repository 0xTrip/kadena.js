import { readFileSync } from 'fs';
import { join } from 'path';

const nearley = require('nearley');
const grammar = require('../grammar.js');

describe('grammar', () => {
  it('should only have one result', () => {
    const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));
    parser.feed(`; comment
;; comment

()

(empty)

( emptyspaces )

( test {
  "hash" := "value"
  , "second" : "value"
  , "second": "value"
  , "second" :"value"
})

(double (expression 1 2))

(module blaat

  @doc "'coin' represents the Kadena Coin Contract. This contract provides both the \
  \buy/redeem gas support in the form of 'fund-tx', as well as transfer,       \
  \credit, debit, coinbase, account creation and query, as well as SPV burn    \
  \create. To access the coin contract, you may use its fully-qualified name,  \
  \or issue the '(use coin)' command in the body of a module declaration."

  (defcap TRANSFER:bool
    ( sender:string
      receiver:string
      amount:decimal
    )
    @managed amount TRANSFER-mgr

    (enforce (!= sender receiver) "same sender and receiver")
    (enforce-unit amount)
    (enforce (> amount 0.0) "Positive amount")
    (compose-capability (DEBIT sender))
    (compose-capability (CREDIT receiver))
  )

  (defcap ROTATE (account:string)
    @doc "Autonomously managed capability for guard rotation"
    @managed
    true)

  (defun TRANSFER_XCHAIN-mgr:decimal
    ( managed:decimal
      requested:decimal
    )

    (enforce (>= managed requested)
      (format "TRANSFER_XCHAIN exceeded for balance {}" [managed (blaat 1 2) (second (+ 1 2))]))
    0.0

    (with-capability (CREDIT sender)
      (if (> refund 0.0)
        (with-read coin-table sender
          { "balance" := balance }
          (update coin-table sender
            { "balance": (+ balance refund) }
          )
        )

        "noop"
      )
    )
  )
)
(let ((curr-time:time (at 'block-time (chain-data)))))

(defpact fund-tx (sender:string miner:string miner-guard:guard total:decimal)
  @doc "'fund-tx' is a special pact to fund a transaction in two steps,     \
  \with the actual transaction transpiring in the middle:                   \
  \                                                                         \
  \  1) A buying phase, debiting the sender for total gas and fee, yielding \
  \     TX_MAX_CHARGE.                                                      \
  \  2) A settlement phase, resuming TX_MAX_CHARGE, and allocating to the   \
  \     coinbase account for used gas and fee, and sender account for bal-  \
  \     ance (unused gas, if any)."

  @model [ (property (> total 0.0))
            (property (valid-account sender))
            (property (valid-account miner))
            ;(property conserves-mass) not supported yet
          ]

  (step (buy-gas sender total))
  (step (redeem-gas miner miner-guard sender total))
  )

(module atWithStuff
  @model
    [ (defproperty conserves-mass (= (column-delta coin-table 'balance) 0.0)) (defproperty valid-account (account:string) (and (>= (length account) 3) (<= (length account) 256))) ]
)

(defun create-account:string (account:string guard:guard)
  @model [ (property (valid-account account)) ]

  (validate-account account)
  (enforce-reserved account guard)

  (insert coin-table account
    { "balance" : 0.0
    , "guard"   : guard
    })
  )

  (let*
    ((fee (read-decimal "fee"))
     (refund (- total fee))
    )

    (enforce-unit fee)
    (enforce (>= fee 0.0)
      "fee must be a non-negative quantity"
    )

    (enforce (>= refund 0.0)
      "refund must be a non-negative quantity"
    )

    (emit-event (TRANSFER sender miner fee)) ;v3

    ; directly update instead of credit
    (with-capability (CREDIT sender)
      (if (> refund 0.0)
        (with-read coin-table sender
          { "balance" := balance }
          (update coin-table sender
            { "balance": (+ balance refund) }
          )
        )

        "noop"
      )
    )

    (with-capability (CREDIT miner)
      (if (> fee 0.0)
        (credit miner miner-guard fee)
        "noop"
      )
    )
  )
`);

    expect(parser.results.length).toBe(1);
  });

  it('should parse a module', () => {
    const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));
    parser.feed(readFileSync(join(__dirname, './coin.contract.pact'), 'utf8'));

    if (parser.results.length > 1) {
      expect(parser.results[0]).toEqual(parser.results[1]);
    }
    expect(parser.results.length).toBe(1);
  });

  it('parses a coin.contract.pact to AST', () => {
    const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));
    //     parser.feed(`
    //     (module coin
    //       (defun transfer (sender:string receiver:string amount:decimal))
    //     )
    // `);
    parser.feed(readFileSync(join(__dirname, './coin.contract.pact'), 'utf8'));

    if (parser.results.length > 1) {
      expect(parser.results[0]).toEqual(parser.results[1]);
    }
    expect(parser.results.length).toBe(1);
  });

  it('parses a test.contract.pact to AST', () => {
    const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));
    //     parser.feed(`
    //     (module coin
    //       (defun transfer (sender:string receiver:string amount:decimal))
    //     )
    // `);
    parser.feed(readFileSync(join(__dirname, './test.contract.pact'), 'utf8'));

    if (parser.results.length > 1) {
      expect(parser.results[0]).toEqual(parser.results[1]);
    }
    expect(parser.results[0]).toEqual(parser.results[1]);
    expect(parser.results.length).toBe(1);
  });

  it('parses a marmalade module to AST', () => {
    const parser = new nearley.Parser(nearley.Grammar.fromCompiled(grammar));
    parser.feed(
      readFileSync(join(__dirname, './marmalade.contract.pact'), 'utf8'),
    );

    if (parser.results.length > 1) {
      expect(parser.results[0]).toEqual(parser.results[1]);
    }
    expect(parser.results.length).toBe(1);
    expect(parser.results[0]).toEqual(parser.results[1]);
  });
});
