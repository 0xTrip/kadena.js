// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateDts2 adds module, capability and function docs to the dts file 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}

interface ICapability_test_func {
  /**
  * this is defcap doc
  */
  addCap(
    cap: \\"user.test-module.test-cap\\", 
    signer: string, 
    name: string): this,
}

type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    /**
* this is module doc
*/

    \\"user.test-module\\": {
      /**
      * this is defun doc
      */
      \\"test-func\\": (
        parameterone: object,
        parametertwo: boolean) => Builder<ICapability_test_func>
    }
  }
}"
`;

exports[`generateDts2 does not generate capability interface if the function uses no capabilities 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}



type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    
    \\"user.test-module\\": {
      \\"test-func\\": (
        parameterone: number,
        parametertwo: boolean) => Builder<ICapV2>
    }
  }
}"
`;

exports[`generateDts2 function parameter is empty if the defun has no param 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}



type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    
    \\"user.test-module\\": {
      \\"test\\": () => Builder<ICapV2>
    }
  }
}"
`;

exports[`generateDts2 return type definition file for a module 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}

interface ICapability_test_func {
  
  addCap(
    cap: \\"user.test-module.test-cap\\", 
    signer: string, 
    name: string): this,
}

type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    
    \\"user.test-module\\": {
      \\"test-func\\": (
        parameterone: string,
        parametertwo: boolean) => Builder<ICapability_test_func>
    }
  }
}"
`;

exports[`generateDts2 use any type if function parameters dont have a type 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}

interface ICapability_test_func {
  
  addCap(
    cap: \\"user.test-module.test-cap\\", 
    signer: string, 
    name: string): this,
}

type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    
    \\"user.test-module\\": {
      \\"test-func\\": (
        parameterone: any,
        parametertwo: boolean) => Builder<ICapability_test_func>
    }
  }
}"
`;

exports[`generateDts2 use object type if function parameters is object{schema} 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}

interface ICapability_test_func {
  
  addCap(
    cap: \\"user.test-module.test-cap\\", 
    signer: string, 
    name: string): this,
}

type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    
    \\"user.test-module\\": {
      \\"test-func\\": (
        parameterone: object,
        parametertwo: boolean) => Builder<ICapability_test_func>
    }
  }
}"
`;

exports[`generateDts2 uses the property type if there is no mapped value for that 1`] = `
"
import type { ICommandBuilderV2, IPactCommand, ICapV2 } from '@kadena/client';
import type { IPactDecimal, IPactInt } from '@kadena/types';

interface ICapability_Coin_GAS {
  addCap(
    cap: \\"coin.GAS\\",
    signer: string
  ): this
}



type Builder<T> = ICommandBuilderV2 & ICapability_Coin_GAS & T

declare module '@kadena/client' {

  export interface IPactModules {
    
    \\"user.test-module\\": {
      \\"test\\": (param: newType) => Builder<ICapV2>
    }
  }
}"
`;
